#Importing useful facilities from libraries etc.
from qiskit import *
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as tck
from qiskit.quantum_info import Pauli
from qiskit.aqua.operators.state_fns import StateFn
from qiskit.aqua.operators import X, Y, Z, I
from qiskit.aqua.operators import PauliExpectation, CircuitSampler, StateFn
from qiskit import Aer, execute
from qiskit.aqua import QuantumInstance
from qiskit.aqua.components.optimizers import COBYLA
import unicodedata



#Defining the ansatz function circuit with a variable parameter
def var_circ(params):
    circ = QuantumCircuit(2)
    #setting up a quantum circuit with 2 qubits
    circ.x([0])
    #applying NOT operator to first qubit
    circ.ry(params, [1])
    #applying variable rotational Y operator to second qubit
    circ.barrier()
    #barrier for visual clarity
    circ.cx([1], [0])
    #entangling the two qubits using the CNOT operator
    circ.barrier()
    #barrier for visual clarity
    psi = StateFn(circ)
    #converting the circuit into a state function
    return psi
    
 
 
#Set the Hamiltonian in terms of Pauli operators
op1 = 5.906709 * I^I 
op2 = 0.218291 * Z^I
op3 = -6.125 * I^Z
op4 = -2.143304 * X^X 
op5 = -2.143304 * Y^Y
#Pauli operator components of Hamiltonian defined individually
H2op = op1 + op2 + op3 + op4 + op5
#Components combined into full Hamiltonian



#Define the objective function and the value to be optimised
def objective_function(params):
    Ansatz_state = var_circ(params)
    #Obtain a state from quantum circuit
    expectation_value = (~Ansatz_state @ H2op @ Ansatz_state).eval().real
    #Finds expectation value of Hamiltonian for ansatz state
    return expectation_value
    
    
    
#Initialize the COBYLA optimizer
optimizer = COBYLA(maxiter=500, tol=0.0001)

#Create the initial parameters
params = np.random.rand(1)
#Carry out optimisation 
ret = optimizer.optimize(num_vars=1, objective_function=objective_function, initial_point=params)

#Obtain the minimum parameter, minimum state, and minimum expectation value
Min_parameter = round(float(ret[0]/np.pi),2)
Min_state = var_circ(ret[0])
Min_value = round((~Min_state @ H2op @ Min_state).eval().real, 4)

#Display the minimum values
print(unicodedata.lookup("GREEK SMALL LETTER THETA") + '\u2098\u1d62\u2099' + ' = ' + str(Min_parameter) + unicodedata.lookup("GREEK SMALL LETTER PI") +' radians')
print('E\u2098\u1d62\u2099' + ' = ' + str(Min_value) + ' MeV')

#Define angle range
angle_range = np.linspace(-1.0 * np.pi, 1.0 * np.pi, 100)

#Scan over entire angle range continuously and find expectation values
full_range = [objective_function(params)
for params in angle_range]

#Define angle range for sampling
angle_range2 = np.linspace(-0.99 * np.pi, 0.99 * np.pi, 25)

#Sample over angles and find expectation values
full_range2 = [objective_function(params)
for params in angle_range2]



#set figure size
f,ax=plt.subplots(figsize=(12,5))

#plot angle in units of pi vs expectation values continuously and discretely 
ax.plot(angle_range/np.pi, full_range)
plt.scatter(angle_range2/np.pi, full_range2, color='red')
ax.legend(['Theory','Sampling'])

#change format of x-axis to display in multiples of pi in 0.25pi increments
ax.xaxis.set_major_formatter(tck.FormatStrFormatter('%g $\pi$'))
ax.xaxis.set_major_locator(tck.MultipleLocator(base=0.25))

#change format of y-axis to display in 2.5 MeV increments
ax.yaxis.set_major_locator(tck.MultipleLocator(base=2.5))

#set axis labels
plt.xlabel('Angle (radians)')
plt.ylabel('Expectation Value (MeV)')

#display plot and grid
plt.grid()
plt.show()
